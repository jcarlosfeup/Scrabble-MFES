class TestJogo


	operations

		static public AssertTrue : bool ==> ()
			AssertTrue(a) == return
		pre a;
		
		static public testaCriarJogadores: () ==> ()
       		testaCriarJogadores () == (
       
       
           dcl tmpbar : seq of Peca := [];
           dcl tmpJogs : seq of Jogador := [];
           dcl jg: Jogo := new Jogo(tmpbar,tmpJogs);
       	   dcl tmp2 : seq of Peca := [];
           dcl tmp1 : seq of Peca := [];
               
           jg.criaJogadores(tmp1,0,tmp2,0);
	       
	       AssertTrue(len jg.getJogadores() = 2);
       );
       
       static public testaCriaBaralho: () ==> ()
       		testaCriaBaralho () == (
       
       
		       dcl barl: seq of Peca := [];
		       dcl tmp5 : seq of Peca := [];
		       dcl tmp6 : seq of Peca := [];
		       dcl players: seq of Jogador := [];
		       dcl jgb: Jogo := new Jogo(barl, players);
		       dcl bar: seq of Peca := jgb.criar_baralho();
		       
		       jgb.setBaralho(bar);
		       --jgb.criar_baralho();
		       
		       AssertTrue(jgb.getBaralho()(1).getLetra() = 'A');
		       AssertTrue(jgb.getBaralho()(16).getPontuacao() = 3);
		       AssertTrue (jgb.getBaralho()(120).getLetra() = '_');
		       AssertTrue(jgb.getBaralho()(2).getPontuacao() <> 2);
       
       );
       
       
       static public testaCompletaMao: () ==> ()
       		testaCompletaMao () == (
       
	       dcl peca1 : Peca := new Peca('T',14);
	       dcl peca2 : Peca := new Peca('J',10);
	       dcl peca3 : Peca := new Peca('E',18);
	       dcl peca4 : Peca := new Peca('M',14);
	       dcl peca5 : Peca := new Peca('R',10);
	       dcl peca6 : Peca := new Peca('I',18);        
	       dcl peca7 : Peca := new Peca('O',40);
       	   dcl peca8 : Peca := new Peca('A',14);
           dcl peca9 : Peca := new Peca('B',10);
           dcl peca10 : Peca := new Peca('C',18);
       	   dcl peca11: Peca := new Peca('E',14);
           dcl peca12 : Peca := new Peca('F',10);
           dcl peca13: Peca := new Peca('G',18);        
           dcl peca14: Peca := new Peca('H',40);
           dcl sim_baralho : seq of Peca := [peca1, peca2, peca3, peca4, peca5, peca6, peca7, peca8, peca9, peca10, peca11, peca12, peca13, peca14];
       	   dcl jgc: Jogo := new Jogo();
       	   dcl tmp5 : seq of Peca := [];
           dcl tmp6 : seq of Peca := [];
               
       
	       jgc.criaJogadores(tmp5,0,tmp6,0);
	       
	       jgc.setBaralho(sim_baralho);
	       
	       jgc.preencheMao(2);
	       
	       AssertTrue( len (jgc.getJogadores()(2).getMao()) = 7 );
       
       );
		
		
		static public testaComparaPecas: () ==> ()
	 		testaComparaPecas () == (
	 	
		 	dcl jogo : Jogo := new Jogo();
		 	dcl peca1 : Peca := new Peca('B',10);
		 	dcl peca2 : Peca := new Peca('D',20);
		 	dcl peca3 : Peca := new Peca('B',30);
		 	
		 	AssertTrue( jogo.comparaPecas(peca1,peca2) = false);
		 	AssertTrue( jogo.comparaPecas(peca1,peca3) = true);
	 );


end TestJogo