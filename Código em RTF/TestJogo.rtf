{\rtf1\ansi\ansicpg1252\uc1\deff0\stshfdbch0\stshfloch0\stshfhich0\stshfbi0\deflang2070\deflangfe2070{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}{\f5\fmodern\fcharset0\fprq1{\*\panose 02070409020205020404}Courier{\*\falt Courier New};}{\f194\froman\fcharset238\fprq2 Times New Roman CE;}
{\f195\froman\fcharset204\fprq2 Times New Roman Cyr;}{\f197\froman\fcharset161\fprq2 Times New Roman Greek;}{\f198\froman\fcharset162\fprq2 Times New Roman Tur;}{\f199\froman\fcharset177\fprq2 Times New Roman (Hebrew);}
{\f200\froman\fcharset178\fprq2 Times New Roman (Arabic);}{\f201\froman\fcharset186\fprq2 Times New Roman Baltic;}{\f202\froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\f214\fmodern\fcharset238\fprq1 Courier New CE;}
{\f215\fmodern\fcharset204\fprq1 Courier New Cyr;}{\f217\fmodern\fcharset161\fprq1 Courier New Greek;}{\f218\fmodern\fcharset162\fprq1 Courier New Tur;}{\f219\fmodern\fcharset177\fprq1 Courier New (Hebrew);}
{\f220\fmodern\fcharset178\fprq1 Courier New (Arabic);}{\f221\fmodern\fcharset186\fprq1 Courier New Baltic;}{\f222\fmodern\fcharset163\fprq1 Courier New (Vietnamese);}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;
\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;
\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1033\langfe2070\cgrid\langnp1033\langfenp2070 \snext0 Normal;}{\*\cs10 \additive \ssemihidden 
Default Paragraph Font;}{\*\ts11\tsrowd\trftsWidthB3\trpaddl108\trpaddr108\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3\trcbpat1\trcfpat1\tscellwidthfts0\tsvertalt\tsbrdrt\tsbrdrl\tsbrdrb\tsbrdrr\tsbrdrdgl\tsbrdrdgr\tsbrdrh\tsbrdrv 
\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1024\langfe1024\cgrid\langnp1024\langfenp1024 \snext11 \ssemihidden Normal Table;}{\s15\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 
\shading2000 \f2\fs20\lang1024\langfe1024\cgrid\noproof\langnp2070\langfenp2070 \snext15 VDM;}{\*\cs16 \additive \f5\chshdng2000\chcfpat0\chcbpat0 \sbasedon10 VDM_COV;}{\*\cs17 \additive \f5\cf6\chshdng2000\chcfpat0\chcbpat0 \sbasedon10 VDM_NCOV;}{
\s18\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \shading2000 \f2\fs20\lang1024\langfe1024\cgrid\noproof\langnp2070\langfenp2070 \sbasedon15 \snext18 VDM_TC_TABLE;}}{\*\latentstyles\lsdstimax156\lsdlockeddef0}
{\*\rsidtbl \rsid1986383\rsid10120619\rsid11169555}{\*\generator Microsoft Word 11.0.6568;}{\info{\title class TestAll}{\author anamarg83@hotmail.com}{\operator anamarg83@hotmail.com}{\creatim\yr2012\mo12\dy7\hr22\min11}
{\revtim\yr2012\mo12\dy7\hr22\min11}{\version2}{\edmins1}{\nofpages6}{\nofwords1347}{\nofchars7274}{\*\company IFAD}{\nofcharsws8604}{\vern24579}}
\widowctrl\ftnbj\aenddoc\noxlattoyen\expshrtn\noultrlspc\dntblnsbdb\nospaceforul\formshade\horzdoc\dghspace180\dgvspace180\dghorigin1701\dgvorigin1984\dghshow0\dgvshow0
\jexpand\viewkind1\viewscale100\pgbrdrhead\pgbrdrfoot\nolnhtadjtbl\nojkernpunct\rsidroot11169555 \fet0{\*\template C:\\Users\\AnaMargarida\\Desktop\\VDM++Toolbox_v8.1.1b\\word\\VDM.dot}\sectd \linex0\endnhere\sectdefaultcl\sftnbj {\*\pnseclvl1
\pnucrm\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang {\pntxta )}}{\*\pnseclvl5
\pndec\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang 
{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}\pard\plain \s15\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid1986383 \shading2000 
\f2\fs20\lang1024\langfe1024\cgrid\noproof\langnp2070\langfenp2070 {\insrsid1986383 class TestJogo
\par 
\par 
\par \tab operations
\par 
\par \tab \tab static public AssertTrue : bool ==> ()
\par \tab \tab \tab AssertTrue(a) == return
\par \tab \tab pre a;
\par \tab \tab 
\par \tab \tab static public testaCriarJogadores: () ==> ()
\par        \tab \tab testaCriarJogadores () == (
\par        
\par        \tab    dcl tmpJogs : seq of Jogador := [];
\par            dcl jg: Jogo := new Jogo(tmpJogs);
\par            dcl peca1 : Peca := new Peca('T',14);
\par \tab        dcl peca2 : Peca := new Peca('J',10);
\par \tab        dcl peca3 : Peca := new Peca('E',18);
\par        \tab    dcl tmp2 : seq of Peca := [peca1,peca2];
\par            dcl tmp1 : seq of Peca := [peca3];
\par           
\par           jg.criaJogadores(tmp1,tmp2);
\par \tab        
\par \tab        AssertTrue(len jg.getJogadores() = 2);
\par        );
\par        
\par        static public testaCriaBaralho: () ==> ()
\par        \tab \tab testaCriaBaralho () == (
\par        
\par       \tab \tab   dcl players: seq of Jogador := [];
\par \tab \tab       dcl jgb: Jogo := new Jogo(players);
\par \tab \tab      
\par \tab \tab \tab    AssertTrue(jgb.getBaralho()(1).getLetra() = 'A');
\par \tab \tab        AssertTrue(jgb.getBaralho()(16).getPontuacao() = 3);
\par \tab \tab        AssertTrue (jgb.getBaralho()(120).getLetra() = '_');
\par \tab \tab        AssertTrue(jgb.getBaralho()(2).getPontuacao() <> 2);
\par        
\par        );
\par        
\par        static public testaCriaMao: () ==> ()
\par    \tab \tab \tab \tab  testaCriaMao () == (
\par    \tab \tab \tab \tab  
\par    \tab \tab \tab \tab   dcl j : Jogo := new Jogo();
\par    \tab \tab \tab \tab   dcl mao_j1: seq of Peca := [];
\par    \tab \tab \tab \tab   dcl j1 : Jogador := new Jogador(1);
\par    \tab \tab \tab \tab   
\par    \tab \tab \tab \tab   mao_j1 := j.criaMaoJoador();
\par    \tab \tab \tab \tab   j1.setMao(mao_j1);
\par    \tab \tab \tab \tab   
\par    \tab \tab \tab \tab    AssertTrue( len j1.getMao() = 7);
\par        \tab \tab );
\par        
\par        
\par        static public testaCompletaMao: () ==> ()
\par        \tab \tab testaCompletaMao () == (
\par        
\par \tab        dcl peca1 : Peca := new Peca('T',14);
\par \tab        dcl peca2 : Peca := new Peca('J',10);
\par \tab        dcl peca3 : Peca := new Peca('E',18);
\par \tab        dcl peca4 : Peca := new Peca('M',14);
\par \tab        dcl peca5 : Peca := new Peca('R',10);
\par \tab        dcl peca6 : Peca := new Peca('I',18);        
\par \tab        dcl peca7 : Peca := new Peca('O',40);
\par        \tab    dcl peca8 : Peca := new Peca('A',14);
\par            dcl peca9 : Peca := new Peca('B',10);
\par            dcl peca10 : Peca := new Peca('C',18);
\par        \tab    dcl peca11: Peca := new Peca('E',14);
\par            dcl peca12 : Peca := new Peca('F',10);
\par            dcl peca13: Peca := new Peca('G',18);        
\par            dcl peca14: Peca := new Peca('H',40);
\par            dcl sim_baralho : seq of Peca := [peca1, peca2, peca3, peca4, peca5, peca6, peca7, peca8, peca9, peca10, peca11, peca12, peca13, peca14];
\par        \tab    dcl jgc: Jogo := new Jogo();
\par        \tab    dcl tmp5 : seq of Peca := [];
\par            dcl tmp6 : seq of Peca := [];
\par                
\par        
\par \tab        jgc.criaJogadores(tmp5,tmp6);
\par \tab        
\par \tab        jgc.setBaralho(sim_baralho);
\par \tab        
\par \tab        jgc.preencheMao(2);
\par \tab        
\par \tab        AssertTrue( len (jgc.getJogadores()(2).getMao()) = 7 );
\par        
\par        );
\par \tab \tab 
\par \tab \tab 
\par \tab \tab static public testaComparaPecas: () ==> ()
\par \tab  \tab \tab testaComparaPecas () == (
\par \tab  \tab 
\par \tab \tab  \tab dcl jogo : Jogo := new Jogo();
\par \tab \tab  \tab dcl peca1 : Peca := new Peca('B',10);
\par \tab \tab  \tab dcl peca2 : Peca := new Peca('D',20);
\par \tab \tab  \tab dcl peca3 : Peca := new Peca('B',30);
\par \tab \tab  \tab 
\par \tab \tab  \tab AssertTrue( jogo.comparaPecas(peca1,peca2) = false);
\par \tab \tab  \tab AssertTrue( jogo.comparaPecas(peca1,peca3) = true);
\par \tab  );
\par \tab  
\par \tab  static public testaComparaPalavras: () ==> ()
\par \tab  \tab \tab \tab \tab testaComparaPalavras() == (
\par \tab  \tab \tab \tab \tab 
\par \tab  \tab \tab \tab \tab dcl jogo : Jogo := new Jogo();
\par \tab  \tab \tab \tab \tab dcl pal1 : seq of char := ['c','a','s','a'];
\par \tab  \tab \tab \tab \tab dcl pal2 : seq of char := ['c','a','s','a'];
\par \tab  \tab \tab \tab \tab dcl pal3 : seq of char := ['c','a','s','a','l'];
\par \tab  \tab \tab \tab \tab dcl pal4 : seq of char := ['c','a','s','t'];
\par \tab  \tab \tab \tab \tab 
\par \tab  \tab \tab \tab \tab 
\par \tab  \tab \tab \tab \tab AssertTrue(jogo.comparaPalavras(pal1,pal2) = true);
\par \tab  \tab \tab \tab \tab AssertTrue(jogo.comparaPalavras(pal1,pal3) = false);
\par \tab  \tab \tab \tab \tab AssertTrue(jogo.comparaPalavras(pal1,pal4) = false);
\par \tab  \tab \tab \tab \tab 
\par \tab  \tab \tab );
\par \tab  \tab \tab 
\par \tab   static public testaPalDicionario: () ==> ()
\par \tab  \tab \tab \tab \tab testaPalDicionario() == (
\par \tab  \tab \tab \tab \tab 
\par \tab  \tab \tab \tab \tab dcl jogo : Jogo := new Jogo();
\par \tab  \tab \tab \tab \tab dcl pal1 : seq of char := ['c','a','s','a'];
\par \tab  \tab \tab \tab \tab dcl pal2 : seq of char := ['k','a','s','a'];
\par \tab  \tab \tab \tab \tab dcl dicionario : set of seq of char := \{['c','a','s','a'],['c','a','s','a','l'],['c','a','s','t']\};
\par \tab  \tab \tab \tab \tab 
\par \tab  \tab \tab \tab \tab AssertTrue(jogo.verificaPalDicionario(pal1,dicionario) = true);
\par \tab  \tab \tab \tab \tab AssertTrue(jogo.verificaPalDicionario(pal2,dicionario) = false);
\par \tab  \tab \tab \tab );
\par \tab  \tab \tab \tab 
\par \tab    static public testaPassaVez: () ==> ()
\par \tab  \tab \tab \tab \tab testaPassaVez() == (
\par \tab  \tab \tab \tab 
\par \tab  \tab \tab \tab dcl jogo : Jogo := new Jogo();
\par \tab  \tab \tab \tab dcl jog1 : Jogador := new Jogador(1);
\par \tab  \tab \tab \tab dcl jog2 : Jogador := new Jogador(2);
\par \tab  \tab \tab \tab 
\par \tab  \tab \tab \tab jogo.setJogadores([jog1,jog2]);
\par \tab  \tab \tab \tab 
\par \tab  \tab \tab \tab jogo.passarVez(jog1);
\par \tab  \tab \tab \tab jogo.passarVez(jog2);
\par \tab  \tab \tab \tab 
\par \tab  \tab \tab \tab AssertTrue( jogo.getVez() = 1);
\par \tab  \tab );\tab 
\par \tab  \tab 
\par \tab  \tab  static public testaRetiraPecaMao: () ==> ()
\par \tab  \tab \tab \tab \tab testaRetiraPecaMao() == (
\par \tab  \tab  
\par \tab  \tab \tab \tab dcl jogo : Jogo := new Jogo();
\par \tab  \tab \tab \tab dcl jog1 : Jogador := new Jogador(1);
\par \tab  \tab \tab \tab dcl jog2 : Jogador := new Jogador(2);
\par \tab  \tab \tab \tab dcl peca1 : Peca := new Peca('B',10);
\par \tab \tab  \tab \tab dcl peca2 : Peca := new Peca('D',20);
\par \tab \tab  \tab \tab dcl mao_jog1 : seq of Peca := [];
\par \tab \tab  \tab \tab 
\par \tab \tab  \tab \tab jog1.setMao([peca1,peca2]);
\par \tab  \tab \tab 
\par \tab  \tab \tab \tab jogo.setJogadores([jog1,jog2]);
\par \tab  \tab \tab \tab 
\par \tab  \tab \tab \tab jogo.retiraPecaMao(jog1,peca1);
\par \tab  \tab \tab \tab -- jogo.retiraPecaMao(jog1,peca2);
\par \tab  \tab \tab \tab mao_jog1 := jog1.getMao();
\par \tab  \tab \tab \tab AssertTrue( len mao_jog1 = 1);
\par \tab  \tab \tab \tab --AssertTrue( len mao_jog1 = 0);
\par \tab  \tab \tab );
\par \tab  \tab \tab 
\par \tab \tab 
\par \tab \tab  static public testaRetiraPecaBaralho: () ==> ()
\par \tab  \tab \tab \tab \tab testaRetiraPecaBaralho() == (
\par \tab  \tab \tab \tab \tab 
\par \tab  \tab \tab \tab    dcl jogo : Jogo := new Jogo();
\par \tab  \tab \tab \tab    dcl baralho_act : seq of Peca := [];
\par \tab \tab \tab        dcl peca_ret : Peca := jogo.retiraPecaBaralho(3);
\par \tab  \tab \tab \tab \tab 
\par \tab  \tab \tab \tab    baralho_act := jogo.getBaralho();
\par \tab  \tab \tab \tab \tab 
\par \tab  \tab \tab \tab \tab AssertTrue( peca_ret.getLetra() = 'A');
\par \tab  \tab \tab \tab \tab AssertTrue( len baralho_act = 119);
\par \tab  \tab \tab );\tab 
\par \tab  \tab \tab 
\par \tab  \tab \tab 
\par \tab  \tab \tab \tab \tab 
\par \tab  \tab \tab \tab \tab 
\par \tab  \tab static public testaJogada: () ==> ()
\par \tab  \tab \tab \tab \tab testaJogada() == (
\par \tab  \tab \tab \tab \tab 
\par \tab  \tab \tab \tab \tab 
\par \tab  \tab \tab \tab \tab dcl jogo : Jogo := new Jogo();
\par \tab  \tab \tab \tab \tab dcl jog1 : Jogador := new Jogador(1);
\par \tab  \tab \tab \tab \tab dcl peca1 : Peca := new Peca('F',10);
\par \tab \tab  \tab \tab \tab dcl peca2 : Peca := new Peca('C',20);
\par \tab \tab  \tab \tab \tab dcl peca3 : Peca := new Peca('A',18);
\par \tab \tab \tab         dcl peca4 : Peca := new Peca('S',14);
\par \tab \tab \tab         dcl peca5 : Peca := new Peca('A',10);
\par \tab \tab \tab         dcl peca6 : Peca := new Peca('I',18);        
\par \tab \tab \tab         dcl peca7 : Peca := new Peca('O',40);
\par \tab \tab \tab         dcl tam_mao : nat;
\par \tab \tab \tab         dcl dicionario : set of seq of char := \{['C','A','S','A'],['C','A','S','A','l'],['C','A','S','T']\};
\par \tab  \tab \tab \tab \tab dcl tabuleiro : Tabuleiro;
\par \tab  \tab \tab \tab \tab dcl result : nat;
\par \tab  \tab \tab \tab \tab 
\par \tab  \tab \tab \tab \tab 
\par \tab  \tab \tab \tab \tab jogo.setDicionario(dicionario);
\par \tab  \tab \tab \tab \tab jog1.setMao([peca1,peca2,peca3,peca4,peca5,peca6,peca7]);
\par \tab  \tab \tab \tab \tab 
\par \tab  \tab \tab \tab \tab result := jogo.jogada(jog1,6,0,['C','A','S','A'],'D');
\par \tab  \tab \tab \tab \tab 
\par \tab  \tab \tab \tab \tab tabuleiro := jogo.getTabuleiro();
\par \tab  \tab \tab \tab \tab tam_mao := len jog1.getMao();
\par \tab  \tab \tab \tab \tab 
\par \tab  \tab \tab \tab \tab AssertTrue( tabuleiro.getCelula(7,0) = 'C');
\par \tab  \tab \tab \tab \tab AssertTrue( tabuleiro.getCelula(8,0) = 'A');
\par \tab  \tab \tab \tab \tab AssertTrue( tabuleiro.getCelula(9,0) = 'S');
\par \tab  \tab \tab \tab \tab AssertTrue( tabuleiro.getCelula(10,0) = 'A');
\par \tab  \tab \tab \tab \tab --AssertTrue( tam_mao = 3);
\par \tab  \tab \tab \tab \tab AssertTrue( result = 1);
\par \tab  \tab \tab \tab \tab 
\par \tab  \tab \tab \tab \tab );
\par \tab  \tab \tab \tab \tab 
\par \tab  \tab \tab \tab \tab 
\par \tab  \tab  static public testaJogada2: () ==> ()
\par \tab  \tab \tab \tab \tab testaJogada2() == (
\par \tab  \tab \tab \tab \tab 
\par \tab  \tab \tab \tab \tab 
\par \tab  \tab \tab \tab \tab dcl jogo : Jogo := new Jogo();
\par \tab  \tab \tab \tab \tab dcl jog1 : Jogador := new Jogador(1);
\par \tab  \tab \tab \tab \tab dcl peca1 : Peca := new Peca('F',10);
\par \tab \tab  \tab \tab \tab dcl peca2 : Peca := new Peca('I',20);
\par \tab \tab  \tab \tab \tab dcl peca3 : Peca := new Peca('T',18);
\par \tab \tab \tab         dcl peca4 : Peca := new Peca('E',14);
\par \tab \tab \tab         dcl peca5 : Peca := new Peca('L',10);
\par \tab \tab \tab         dcl peca6 : Peca := new Peca('H',18);        
\par \tab \tab \tab         dcl peca7 : Peca := new Peca('A',40);
\par \tab \tab \tab         dcl tam_mao : nat;
\par \tab \tab \tab         dcl dicionario : set of seq of char := \{['C','A','S','A'],['C','A','S','A','l'],['T','E','L','H','A']\};
\par \tab  \tab \tab \tab \tab dcl tabuleiro : Tabuleiro;
\par \tab  \tab \tab \tab \tab dcl result : nat;
\par \tab  \tab \tab \tab \tab 
\par \tab  \tab \tab \tab \tab 
\par \tab  \tab \tab \tab \tab jogo.setDicionario(dicionario);
\par \tab  \tab \tab \tab \tab jog1.setMao([peca1,peca2,peca3,peca4,peca5,peca6,peca7]);
\par \tab  \tab \tab \tab \tab 
\par \tab  \tab \tab \tab \tab result := jogo.jogada(jog1,6,0,['T','E','L','H','A'],'B');
\par \tab  \tab \tab \tab \tab 
\par \tab  \tab \tab \tab \tab tabuleiro := jogo.getTabuleiro();
\par \tab  \tab \tab \tab \tab tam_mao := len jog1.getMao();
\par \tab  \tab \tab \tab \tab 
\par \tab  \tab \tab \tab \tab AssertTrue( tabuleiro.getCelula(6,1) = 'T');
\par \tab  \tab \tab \tab \tab AssertTrue( tabuleiro.getCelula(6,2) = 'E');
\par \tab  \tab \tab \tab \tab AssertTrue( tabuleiro.getCelula(6,3) = 'L');
\par \tab  \tab \tab \tab \tab AssertTrue( tabuleiro.getCelula(6,4) = 'H');
\par \tab  \tab \tab \tab \tab AssertTrue( tabuleiro.getCelula(6,5) = 'A');
\par \tab  \tab \tab \tab \tab -- AssertTrue( tam_mao = 2);
\par \tab  \tab \tab \tab \tab AssertTrue( result = 1);
\par \tab  \tab \tab \tab \tab 
\par \tab  \tab \tab \tab );
\par \tab  \tab \tab \tab 
\par \tab  \tab \tab \tab 
\par \tab  \tab \tab \tab  static public runAllJogoTests: () ==> ()
\par \tab \tab \tab \tab \tab \tab \tab  runAllJogoTests() == (
\par \tab \tab \tab \tab \tab \tab \tab  
\par \tab \tab \tab \tab \tab \tab \tab  
\par \tab \tab \tab \tab \tab \tab \tab testaCriarJogadores();
\par \tab \tab \tab \tab \tab \tab \tab testaCriaBaralho();
\par \tab \tab \tab \tab \tab \tab \tab testaCriaMao();
\par \tab \tab \tab \tab \tab \tab \tab testaCompletaMao();
\par \tab \tab \tab \tab \tab \tab \tab testaComparaPecas();
\par \tab \tab \tab \tab \tab \tab \tab testaComparaPalavras();
\par \tab \tab \tab \tab \tab \tab \tab testaPalDicionario();
\par \tab \tab \tab \tab \tab \tab \tab testaPassaVez();
\par \tab \tab \tab \tab \tab \tab \tab testaRetiraPecaMao();
\par \tab \tab \tab \tab \tab \tab \tab testaRetiraPecaBaralho();
\par \tab \tab \tab \tab \tab \tab \tab testaJogada();
\par \tab \tab \tab \tab \tab \tab \tab testaJogada2();
\par \tab \tab \tab \tab \tab );
\par \tab  \tab \tab \tab \tab 
\par \tab  \tab \tab \tab \tab 
\par \tab  \tab \tab 
\par 
\par 
\par end TestJogo}{\insrsid11169555 
\par }\pard\plain \ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid1986383 \fs20\lang1033\langfe2070\cgrid\langnp1033\langfenp2070 {\insrsid1986383\charrsid1986383 
\par }\pard\plain \s18\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid1986383 \shading2000 \f2\fs20\lang1024\langfe1024\cgrid\noproof\langnp2070\langfenp2070 {\insrsid1986383 TestJogo}{
\noproof0\insrsid1986383\charrsid10120619 
\par }}